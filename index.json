[{"content":"들어가며 전국의 스키장의 슬로프 현황을 실시간으로 보여주는 사이드 프로젝트 낭만스키를 진행하면서 다양한 규격의 리조트 사이트를 크롤링 해야했습니다.\n0.1초가 중요할 만큼 실시간이 필요하지 않기 때문에 크롤링만 담당하는 미니 서버를 구축해서 일정 시간마다 한번씩 모든 리조트 사이트를 돌면서 DB에 저장하는 방식을 사용했습니다.\n[문제점] 미니서버로 사용하고 메인API가 따로 있기 때문에 평상시에는 문제가 없지만 고객의 요청으로 인한 강제 새로고침 요청 시 전국의 리조트 15곳을 순차적으로 크롤링하기 떄문에 고객이 결과를 반환받기 까지 수초가 걸렸습니다.\n크롤링 -\u0026gt; db insert -\u0026gt; 다음 리조트 크롤링 -\u0026gt; ... 반복 -\u0026gt; 메인 서버에서 결과값 반환\n[해결방안] aiohttp를 이용해서 비동기 방식으로 변경하고 DB에 insert 할때도 크롤링 결과를 모아 bulk_update를 이용하는 방식으로 변경하여 걸리는 시간을 0.5초 이내로 낮출 수 있었습니다.\n비동기 크롤링 -\u0026gt; bulk_update로 한번에 insert -\u0026gt; 메인 서버에서 결과값 반환\n이 글에서는 우선 requests, grequests, aiohttp를 로컬에서 돌아가는 테스트 서버에 100번씩 요청을 보냈을때 속도를 비교해보고 가장 빠른 방법을 선택해 FastAPI에 적용하려고 합니다. 같은 형식이 아닌 다양한 여러 페이지를 가장 빠르게 크롤링하고 어떤식으로 구조를 잡았는지, DB에는 어떻게 효과적으로 Insert 했는지 과정을 소개합니다.\n실행환경은 다음과 같습니다.\nOS : MacOS Monterey (Mac Studio) Versions : pipenv(pyenv python3.10.3), FastAPI(0.84) Etc : Talend Api Tester, Mysql(AWS RDS) 테스트로 사용할 간단한 FastAPI를 실행시켰습니다. 요청을 0.1초 후에 리턴합니다.\n# url : http://127.0.0.1:8002/test/{num} @app.get(\u0026#34;/test/{num}\u0026#34;) def get_test(num): import time time.sleep(0.1) return {\u0026#34;num\u0026#34;: num} requests 테스트 requests 라이브러리 설치\npipenv install requests 간단히 requests를 테스트해봅니다. 테스틀 위해서 앞서 만든 url로 get 요청을 100번 보내서 평균을 내어 1개 요청에 몇초가 소요됬는지 확인해봅니다.\ndef request_test(): import requests import time start = time.time() cnt = 100 for i in range(1, cnt + 1): url = f\u0026#34;http://127.0.0.1:8002/test/{i}\u0026#34; res = requests.get(url) print(f\u0026#34;{i}] status code -\u0026gt; {res.status_code}\u0026#34;) total = round(time.time() - start, 4) average = round(total/cnt, 4) print(f\u0026#34;Total -\u0026gt; {total}sec\u0026#34;) print(f\u0026#34;Avg -\u0026gt; {average}sec\u0026#34;) request_test() 결과값\n1] status code -\u0026gt; 200 ... 100] status code -\u0026gt; 200 Total -\u0026gt; 11.1368sec Avg -\u0026gt; 0.1114sec grequests 테스트 grequests 는 Gevent를 이용하여 비동기 http request를 할 수 있는 라이브러리입니다. https://github.com/spyoungtech/grequests\ngrequests 라이브러리 설치\npipenv install grequests 100번의 요청을 보내봅니다.\ndef grequest_test(): import grequests import time cnt = 100 urls = [f\u0026#34;http://127.0.0.1:8002/test/{i}\u0026#34; for i in range(1, cnt+1)] start = time.time() rs = (grequests.get(u) for u in urls) print(grequests.map(rs)) total = round(time.time() - start, 4) average = round(total/cnt, 4) print(f\u0026#34;Total -\u0026gt; {total}sec\u0026#34;) print(f\u0026#34;Avg -\u0026gt; {average}sec\u0026#34;) grequest_test() 결과값\n[\u0026lt;Response [200]\u0026gt;, ..., \u0026lt;Response [200]\u0026gt;] Total -\u0026gt; 0.4132sec Avg -\u0026gt; 0.0041sec aiohttp 테스트 aiohttp 라이브러리 설치\npipenv install aiohttp 100번의 요청을 보내봅니다.\nimport asyncio import time from aiohttp import ClientSession async def aiohttp_test(url): async with ClientSession() as session: async with session.get(url) as response: return await response.read() cnt = 100 start = time.time() loop = asyncio.get_event_loop() coroutines = [aiohttp_test(f\u0026#39;http://127.0.0.1:8002/test/{i}\u0026#39;) for i in range(cnt)] results = loop.run_until_complete(asyncio.gather(*coroutines)) # print(result) total = round(time.time() - start, 4) average = round(total/cnt, 4) print(f\u0026#34;Total -\u0026gt; {total}sec\u0026#34;) print(f\u0026#34;Avg -\u0026gt; {average}sec\u0026#34;) 결과\nTotal -\u0026gt; 0.3705sec Avg -\u0026gt; 0.0037sec requests vs grequests vs aiohttp 속도 비교 1개의 요청을 처리하는데 걸리는 평균 시간\nrequests : 0.1114sec grequests : 0.0041sec aiohttp : 0.0037sec 여러번 계속 테스트 해봐도 aiohttp가 가장 빨랐습니다. 내부망에서 왔다갔다 하는거라 큰 차이가 나진 않았던 것 같습니다.\nFastAPI에 aiohttp 적용하기 대략적인 프로젝트 tree 구조\n. ├── Dockerfile ├── docker-compose.yml ├── .env ├── requirements.txt ├── scripts │ └── db_to_orm.sh └── src ├── config (RDS 연결) │ ├── __init__.py │ └── database.py ├── constant.py (상수값 저장) ├── crawler (크롤링) │ ├── __init__.py │ ├── crawler.py ├── main.py (api) ├── model (DB모델) │ ├── __init__.py │ └── models.py ├── service (DB insert) │ ├── __init__.py │ └── slope_time_service.py └── utils (결과 Discord 전송) └── webhook.py 작성중\n","permalink":"https://cha2hyun.github.io/projects/nangmanski/crawling/","summary":"서버에서 크롤링을하여 데이터를 가공하여 DB에 저장해야 할때 어떤 방법이 가장 적합했는지 기록합니다.","title":"FastAPI에서 aiohttp를 이용한 비동기 크롤링"},{"content":"Intro This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme. by Hugo Authors\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Inline Code This is Inline Code\nOnly pre This is pre text Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with backticks and language specified 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; import hello print(hello) Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Gist List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://cha2hyun.github.io/posts/etc/markdown-syntac-guide/","summary":"마크다운 신택스 가이드 by Hugo Authors","title":"Markdown Syntax Guide"}]